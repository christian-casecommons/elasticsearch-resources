AWSTemplateFormatVersion: "2010-09-09"

Description: Elasticsearch Resources - {{ env }}

Parameters:
  ElasticsearchImageId:
    Type: String
    Description: Elasticsearch Amazon Machine Image ID
  ElasticsearchInstanceType:
    Type: String
    Description: Elasticsearch EC2 Instance Type
  ElasticsearchDesiredCount:
    Type: Number
    Description: Elasticsearch AutoScaling Group Desired Count
  ElasticsearchDockerImage:
    Type: String
    Description: Docker Image for Elasticsearch
  ElasticsearchDockerImageTag:
    Type: String
    Description: Docker Image Tag for Elasticsearch
    Default: latest
  ElasticsearchKeyName:
    Type: String
    Description: EC2 Key Pair for Elasticsearch SSH Access
  ElasticsearchLoadBalancerPort:
    Type: Number
    Description: Elasticsearch Front End HTTP Port
  ElasticsearchPort:
    Type: Number
    Description: Elasticsearch Port
  ElasticsearchHostname:
    Type: String
    Description: Host portion of the Elasticsearch URL
  LogRetention:
    Type: Number
    Description: Log retention in days

Conditions:
  ElasticsearchSingleInstanceCondition:
    Fn::Equals:
      - Ref: ElasticsearchDesiredCount
      - 1

Resources:
  EcsServiceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: [ "ecs.amazonaws.com" ]
            Action: [ "sts:AssumeRole" ]
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole"

  ElasticsearchDnsRecord:
    Type: "AWS::Route53::RecordSet"
    Properties:
      Name:
        Fn::Join: ["", [
          "Fn::Sub": "${ElasticsearchHostname}.",
          "Fn::ImportValue": "DefaultVpcDomain"
        ] ]
      TTL: "300"
      HostedZoneName:
        Fn::ImportValue: DefaultVpcZone
      Type: "CNAME"
      Comment:
        Fn::Sub: "Intake API Elasticsearch - ${AWS::StackName}"
      ResourceRecords:
        - Fn::Sub: "${ElasticsearchLoadBalancer.DNSName}"
  ElasticsearchLoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Scheme: "internal"
      SecurityGroups:
       - Ref: "ElasticsearchLoadBalancerSecurityGroup"
      Subnets:
        - Fn::ImportValue: DefaultHighSubnetA
        - Fn::ImportValue: DefaultHighSubnetB
      LoadBalancerAttributes:
        - Key: "deletion_protection.enabled"
          Value: false
        - Key: "idle_timeout.timeout_seconds"
          Value: 30
      Tags:
        - Key: "Name"
          Value:
            Fn::Sub: ${AWS::StackName}-elasticsearch-lb
  ElasticsearchLoadBalancerListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        - TargetGroupArn: { "Ref": "ElasticsearchServiceTargetGroup" }
          Type: forward
      LoadBalancerArn: { "Ref": "ElasticsearchLoadBalancer" }
      Port: { "Ref": "ElasticsearchLoadBalancerPort" }
      Protocol: "HTTP"
  ElasticsearchServiceTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      VpcId:
        Fn::ImportValue: "DefaultVpcId"
      Protocol: "HTTP"
      Port: { "Ref": "ElasticsearchPort" }
      TargetGroupAttributes:
        - Key: "deregistration_delay.timeout_seconds"
          Value: 60
  ElasticsearchLoadBalancerSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      VpcId:
        Fn::ImportValue: "DefaultVpcId"
      GroupDescription: "Intake API Elasticsearch Load Balancer Security Group"
  ElasticsearchLoadBalancerToElasticsearchIngress:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      IpProtocol: "tcp"
      FromPort: { "Ref": "ElasticsearchPort" }
      ToPort: { "Ref": "ElasticsearchPort" }
      GroupId: { "Ref": "ElasticsearchAutoscalingSecurityGroup" }
      SourceSecurityGroupId: { "Ref": "ElasticsearchLoadBalancerSecurityGroup" }
  ElasticsearchLoadBalancerToElasticsearchEgress:
    Type: "AWS::EC2::SecurityGroupEgress"
    Properties:
      IpProtocol: "tcp"
      FromPort: { "Ref": "ElasticsearchPort" }
      ToPort: { "Ref": "ElasticsearchPort" }
      GroupId: { "Ref": "ElasticsearchLoadBalancerSecurityGroup" }
      DestinationSecurityGroupId: { "Ref": "ElasticsearchAutoscalingSecurityGroup" }
  ElasticsearchAutoscaling:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    DependsOn:
      - ElasticsearchDmesgLogGroup
      - ElasticsearchDockerLogGroup
      - ElasticsearchEcsAgentLogGroup
      - ElasticsearchEcsInitLogGroup
      - ElasticsearchMessagesLogGroup
    CreationPolicy:
      ResourceSignal:
        Count: { "Ref": "ElasticsearchDesiredCount"}
        Timeout: "PT15M"
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: { "Ref": "ElasticsearchDesiredCount"}
        MinSuccessfulInstancesPercent: "100"
        WaitOnResourceSignals: "true"
        PauseTime: "PT15M"
    Properties:
      VPCZoneIdentifier:
        - Fn::ImportValue: "DefaultHighSubnetA"
        - Fn::ImportValue: "DefaultHighSubnetB"
      LaunchConfigurationName: { "Ref" : "ElasticsearchAutoscalingLaunchConfiguration" }
      MinSize: "0"
      MaxSize: "4"
      DesiredCapacity: { "Ref": "ElasticsearchDesiredCount"}
      Tags:
        - Key: Name
          Value:
            Fn::Sub: ${AWS::StackName}-ElasticsearchAutoscaling-instance
          PropagateAtLaunch: "true"
  ElasticsearchAutoscalingLaunchConfiguration:
    Type: "AWS::AutoScaling::LaunchConfiguration"
    Metadata:
      AWS::CloudFormation::Init:
        config:
          commands:
            10_first_run:
              command: "sh firstrun.sh"
              env:
                STACK_NAME: { "Ref": "AWS::StackName" }
                AUTOSCALING_GROUP: "ElasticsearchAutoscaling"
                AWS_DEFAULT_REGION: { "Ref": "AWS::Region" }
                ECS_CLUSTER: { "Ref": "ElasticsearchCluster" }
                DOCKER_NETWORK_MODE: host
                PROXY_URL:
                  Fn::ImportValue: DefaultProxyURL
              cwd: "/home/ec2-user/"
          files:
            /etc/ecs/ecs.config:
              content:
                Fn::Sub: "ECS_CLUSTER=${ElasticsearchCluster}\n"
    Properties:
      ImageId: { "Ref": "ElasticsearchImageId" }
      InstanceType: { "Ref": "ElasticsearchInstanceType" }
      IamInstanceProfile: { "Ref": "ElasticsearchAutoscalingInstanceProfile" }
      KeyName: { "Ref": "ElasticsearchKeyName" }
      SecurityGroups:
        - Ref: "ElasticsearchAutoscalingSecurityGroup"
      UserData:
        Fn::Base64:
          Fn::Join: ["\n", [
            "#!/bin/bash",
            "set -e",
            "Fn::Join": ["", [
              "Fn::Sub": "/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource ElasticsearchAutoscalingLaunchConfiguration --region ${AWS::Region}",
              "    --http-proxy ", "Fn::ImportValue": "DefaultProxyURL",
              "    --https-proxy ", "Fn::ImportValue": "DefaultProxyURL"
            ] ],
            "Fn::Join": ["", [
              "Fn::Sub": "/opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ElasticsearchAutoscaling --region ${AWS::Region}",
              "    --http-proxy ", "Fn::ImportValue": "DefaultProxyURL",
              "    --https-proxy ", "Fn::ImportValue": "DefaultProxyURL"
            ] ]
          ] ]
  ElasticsearchAutoscalingSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      VpcId:
        Fn::ImportValue: "DefaultVpcId"
      GroupDescription: "Elasticsearch Security Group"
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: 22
          ToPort: 22
          CidrIp:
            Fn::ImportValue: "DefaultManagementSubnetACidr"
        - IpProtocol: "tcp"
          FromPort: 22
          ToPort: 22
          CidrIp:
            Fn::ImportValue: "DefaultManagementSubnetBCidr"
      SecurityGroupEgress:
        - IpProtocol: "tcp"
          FromPort: 3128
          ToPort: 3128
          DestinationSecurityGroupId:
            Fn::ImportValue: DefaultProxySecurityGroup
        - IpProtocol: "udp"
          FromPort: 53
          ToPort: 53
          CidrIp:
            Fn::Join: ["", [
              "Fn::ImportValue": "DefaultVpcDnsServer", "/32"
            ] ]
        - IpProtocol: "udp"
          FromPort: 123
          ToPort: 123
          CidrIp: 0.0.0.0/0
  ElasticsearchAutoscalingRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: [ "ec2.amazonaws.com" ]
            Action: [ "sts:AssumeRole" ]
      Path: "/"
      ManagedPolicyArns: []
      Policies:
        - {{ cf_cloudwatch_ec2_logs_policy | to_json }}
        - PolicyName: "EC2ContainerInstancePolicy"
          PolicyDocument:
            Statement:
              - Effect: "Allow"
                Action:
                  - "ecs:RegisterContainerInstance"
                  - "ecs:DeregisterContainerInstance"
                Resource:
                  Fn::Sub: "arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:cluster/${ElasticsearchCluster}"
              - Effect: "Allow"
                Action:
                  - "ecs:DiscoverPollEndpoint"
                  - "ecs:Submit*"
                  - "ecs:Poll"
                  - "ecs:StartTelemetrySession"
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - "ecr:BatchCheckLayerAvailability"
                  - "ecr:BatchGetImage"
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:GetAuthorizationToken"
                Resource: "*"
  ElasticsearchAutoscalingInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      Roles: [ { "Ref": "ElasticsearchAutoscalingRole" } ]
  ElasticsearchCluster:
    Type: "AWS::ECS::Cluster"
  ElasticsearchTaskDefinition:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      NetworkMode: host
      Volumes:
        - Name: esdata
          Host:
            SourcePath: /ecs/esdata
      ContainerDefinitions:
      - Name: elasticsearch
        Image:
          Fn::Sub: ${ElasticsearchDockerImage}:${ElasticsearchDockerImageTag}
        MemoryReservation: 500
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Fn::Sub: ${AWS::StackName}/ecs/ElasticsearchService/elasticsearch
            awslogs-region: { "Ref": "AWS::Region" }
            awslogs-stream-prefix: docker
        PortMappings:
        - ContainerPort: { "Ref": "ElasticsearchPort" }
          Protocol: tcp
        MountPoints:
          - SourceVolume: esdata
            ContainerPath: /var/lib/elasticsearch/data
  ElasticsearchService:
    Type: "AWS::ECS::Service"
    DependsOn:
      - ElasticsearchAutoscaling
      - ElasticsearchServiceLogGroup
    Properties:
      Cluster: { "Ref": "ElasticsearchCluster" }
      TaskDefinition: { "Ref": "ElasticsearchTaskDefinition" }
      DesiredCount: { "Ref": "ElasticsearchDesiredCount"}
      DeploymentConfiguration:
          MinimumHealthyPercent:
            Fn::If:
              - "ElasticsearchSingleInstanceCondition"
              - 0
              - 50
          MaximumPercent: 200
      LoadBalancers:
        - ContainerName: elasticsearch
          ContainerPort: { "Ref": "ElasticsearchPort" }
          TargetGroupArn: { "Ref": "ElasticsearchServiceTargetGroup" }
      Role: { "Ref": "EcsServiceRole" }
  ElasticsearchDmesgLogGroup:
    Type: "AWS::Logs::LogGroup"
    DeletionPolicy: Delete
    Properties:
      LogGroupName:
        Fn::Sub: ${AWS::StackName}/ec2/ElasticsearchAutoscaling/var/log/dmesg
      RetentionInDays: { "Ref": "LogRetention" }
  ElasticsearchDockerLogGroup:
    Type: "AWS::Logs::LogGroup"
    DeletionPolicy: Delete
    Properties:
      LogGroupName:
        Fn::Sub: ${AWS::StackName}/ec2/ElasticsearchAutoscaling/var/log/docker
      RetentionInDays: { "Ref": "LogRetention" }
  ElasticsearchEcsAgentLogGroup:
    Type: "AWS::Logs::LogGroup"
    DeletionPolicy: Delete
    Properties:
      LogGroupName:
        Fn::Sub: ${AWS::StackName}/ec2/ElasticsearchAutoscaling/var/log/ecs/ecs-agent
      RetentionInDays: { "Ref": "LogRetention" }
  ElasticsearchEcsInitLogGroup:
    Type: "AWS::Logs::LogGroup"
    DeletionPolicy: Delete
    Properties:
      LogGroupName:
        Fn::Sub: ${AWS::StackName}/ec2/ElasticsearchAutoscaling/var/log/ecs/ecs-init
      RetentionInDays: { "Ref": "LogRetention" }
  ElasticsearchMessagesLogGroup:
    Type: "AWS::Logs::LogGroup"
    DeletionPolicy: Delete
    Properties:
      LogGroupName:
        Fn::Sub: ${AWS::StackName}/ec2/ElasticsearchAutoscaling/var/log/messages
      RetentionInDays: { "Ref": "LogRetention" }
  ElasticsearchServiceLogGroup:
    Type: "AWS::Logs::LogGroup"
    DeletionPolicy: Delete
    Properties:
      LogGroupName:
        Fn::Sub: ${AWS::StackName}/ecs/ElasticsearchService/elasticsearch
      RetentionInDays: { "Ref": "LogRetention" }
